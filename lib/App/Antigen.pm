package App::Antigen;

use Moo;
use MooX::Options;
use YAML::Tiny;
use Path::Tiny;
use IPC::System::Simple qw/ system /;

our $VERSION = '0.001';

=head1 NAME

App::Antigen - Blah blah blah

=head1 SYNOPSIS

  use App::Antigen;

=head1 DESCRIPTION

App::Antigen is the main module for the antigen-perl application.

=cut

option 'config' => (
  is => 'ro',
  format => 's',
  short => 'c',
  default => sub { File::Spec->catfile( $ENV{HOME}, '.zsh', 'config.yml' ) },
  doc => 'Config file for your Zsh plugins',
);

option 'output' => (
  is => 'lazy',
  format => 's',
  short => 'o',
  default => sub { File::Spec->catfile( $ENV{HOME}, '.antigen-perl' ) },
  doc => 'Directory for all Antigen-Perl output files',
);

option 'repo' => (
  is => 'lazy',
  format => 's',
  short => 'r',
  builder => sub { File::Spec->catfile( $_[0]->output, 'repos' ) },
  doc => 'Directory for Antigen-Perl repos',
);

option 'output_file' => (
  is => 'lazy',
  format => 's',
  short => 'f',
  builder => sub { File::Spec->catfile( $_[0]->output, 'antigen-perl.zsh' ) },
  doc => 'Final output file for sourcing',
);

has 'yaml' => (
  is => 'lazy',
  builder => sub { YAML::Tiny->read( $_[0]->config )->[0] },
);

has 'plugins' => (
  is => 'lazy',
  builder => sub { $_[0]->yaml->{ plugins } },
);

sub run {
  my $self = shift;

  my @plugin_dirs;

  for my $plugin ( @{ $self->plugins } ) {
    if ( exists $plugin->{ github } ) {
      push @plugin_dirs, $self->github_cmd( $plugin->{ github } );
    }
  }

  my @plugin_files;

  for my $plugin_dir ( @plugin_dirs ) {
    push @plugin_files, $self->find_plugin( $plugin_dir );
  }

  $self->write_output_file( \@plugin_files, \@plugin_dirs );

  print "To actually use the plugins, make sure you have the following line at the bottom of your ~/.zshrc:\n\n";
  print "    source " . $self->output_file . "\n\n\n";
}

sub gen_github_url {
  my ( $self, $repo ) = @_;

  return sprintf( "https://github.com/%s.git", $repo );
}

sub gen_plugin_target {
  my ( $self, $repo ) = @_;

  $repo =~ s/:/-COLON-/g;
  $repo =~ s/\//-SLASH-/g;

  return File::Spec->catfile( $self->repo, $repo );
}

sub github_cmd {
  my ( $self, $repo ) = @_;

  my $url = $self->gen_github_url( $repo );
  my $output_file = $self->gen_plugin_target( $url );

  if ( -d $output_file ) {
    print "skipping existing plugin $repo\n";
  } else {
    system ( 'git', 'clone', '--recursive', '--', $url, $output_file );
  }

  return $output_file;
}

sub find_plugin {
  my ( $self, $dir ) = @_;

  my @plugins;

  my $iter = path( $dir )->iterator;
  while (my $path = $iter->() ) {
    push ( @plugins, $path->stringify ) if $path =~ /\.plugin\.zsh$/;
  }

  return @plugins;
}

sub write_output_file {
  my ( $self, $plugins, $directories ) = @_;

  my $file = path( $self->output_file );

  my @lines = (
    "# Generated by Script antigen-perl\n"
  );

  push @lines, map { "source " . $_ . "\n" } @$plugins;
  push @lines, map { "fpath+=" . $_ . "\n" } @$directories;

  $file->spew( join "", @lines );
}

=head1 AUTHOR

Tom Bloor E<lt>tom.bloor@googlemail.comE<gt>

=head1 COPYRIGHT

Copyright 2014- Tom Bloor

=head1 LICENSE

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=head1 SEE ALSO

=cut

1;
